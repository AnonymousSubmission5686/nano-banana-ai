// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  password      String?   // For credential login
  
  // Credits and subscription
  credits       Int       @default(10) // Free credits on signup
  totalCredits  Int       @default(10)
  subscription  Subscription?
  
  // OAuth accounts
  accounts      Account[]
  sessions      Session[]
  
  // User generated content
  generations   Generation[]
  transactions  Transaction[]
  payments      Payment[]
  
  // Timestamps
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLoginAt   DateTime?
  
  @@map("users")
}

// OAuth Account
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Subscription Plans
model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  stripeCustomerId String?  @unique
  stripeSubscriptionId String? @unique
  stripePriceId    String?
  
  plan             String   // 'free' | 'starter' | 'pro' | 'unlimited'
  status           String   // 'active' | 'canceled' | 'past_due'
  creditsPerMonth  Int
  
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean @default(false)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  @@map("subscriptions")
}

// Image Generation Records
model Generation {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Generation details
  prompt      String
  character   String   // Selected anime character
  fusionMode  String   // Fusion mode used
  imageUrl    String?  // Original image URL
  resultUrl   String?  // Generated image URL
  
  // fal.AI details
  falRequestId String?
  falModel     String?
  
  // Metadata
  status      String   @default("pending") // 'pending' | 'processing' | 'completed' | 'failed'
  error       String?
  creditsUsed Int      @default(1)
  
  // Settings
  settings    Json?    // Store generation settings as JSON
  
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  @@index([userId])
  @@index([status])
  @@map("generations")
}

// Credit Transactions
model Transaction {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        String   // 'purchase' | 'usage' | 'refund' | 'bonus'
  amount      Int      // Positive for credit, negative for debit
  balance     Int      // Balance after transaction
  
  description String?
  metadata    Json?
  
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@map("transactions")
}

// Payment Records
model Payment {
  id                String   @id @default(cuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Stripe details
  stripePaymentIntentId String? @unique
  stripeSessionId       String? @unique
  
  amount            Int      // Amount in cents
  currency          String   @default("usd")
  credits           Int      // Credits purchased
  
  status            String   // 'pending' | 'processing' | 'succeeded' | 'failed'
  
  metadata          Json?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId])
  @@index([status])
  @@map("payments")
}

// Verification Token for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verification_tokens")
}
}
